#!/usr/bin/env ruby
# frozen_string_literal: true

require "optparse"
require "pathname"
require "yaml"

require_relative "lib/topic"
require_relative "lib/topic_loader"

module BuildPattern
  OPTIONS = proc do |opts|
    opts.banner = <<~USAGE
      Usage: build-pattern TOPICFILE [OPTIONS]
    USAGE

    opts.on "--help", -"h", "Prints this help" do
      puts opts
      exit
    end
  end

  class App
    attr_reader :topic_file

    def initialize(topic_file, validate: false)
      @topic_file = Pathname(topic_file)
      @validate = validate
    end

    def run
      errors = topics.flat_map(&:errors)
      if errors.any?
        warn errors
        exit(1)
      end

      puts ['\b(', sorted_patterns.join("|"), ')\b'].join
    end

    def sorted_patterns
      topics.flat_map(&:patterns).sort_by { |value| [-value.length, value] }
    end

    def topics
      @topics ||= TopicLoader.from_file(topic_file)
    end

    def validate?
      @validate
    end

    def self.run(...)
      new(...).run
    end
  end
end

if $PROGRAM_NAME == __FILE__
  arguments = ARGV.dup
  options = {}
  OptionParser.new(&BuildPattern::OPTIONS).parse!(arguments, into: options)
  options.transform_keys! { |key| key.to_s.tr("-", "_").to_sym }
  BuildPattern::App.run(*arguments, **options)
end
