#!/usr/bin/env ruby
# frozen_string_literal: true

require "awesome_print"
require "optparse"
require "pathname"
require "yaml"

require_relative "lib/topic"
require_relative "lib/topic_loader"
require_relative "lib/category"
require_relative "lib/category_loader"

module BuildPattern
  OPTIONS = proc do |opts|
    opts.banner = <<~USAGE
      Usage: build-pattern TOPICFILE [OPTIONS]
    USAGE

    opts.on "--only CATEGORIES", "-c", Array, "Only include these topic categories" do |categories|
      categories.map(&:strip)
    end

    opts.on "--except CATEGORIES", "-x", Array, "Exclude topic categories" do |categories|
      categories.map(&:strip)
    end

    opts.on "--help", -"h", "Prints this help" do
      puts opts
      exit
    end
  end

  class App
    attr_reader :topic_file, :category_file, :only, :except

    def initialize(topic_file, category_file, validate: false, only: [], except: [])
      @topic_file = Pathname(topic_file)
      @category_file = Pathname(category_file)
      @validate = validate
      @only = only
      @except = except
    end

    def run
      errors = all_topics.flat_map(&:errors)
      if errors.any?
        warn errors
        exit(1)
      end

      puts ['\b(', sorted_patterns.join("|"), ')\b'].join
    end

    def sorted_patterns
      topics.flat_map(&:patterns).sort_by { |value| [-value.length, value] }
    end

    def topics
      @topics ||= begin
        base = only.any? ? only_topics : all_topics
        base - except_topics
      end
    end

    def only_topics
      @only_topics ||= only.flat_map do |inclusion|
        include_topics = topics_matching(inclusion)
        raise "No category or topic matches #{inclusion.inspect}" if include_topics.empty?

        include_topics
      end
    end

    def except_topics
      @except_topics ||= except.flat_map do |exception|
        exclude_topics = topics_matching(inclusion)
        raise "No category or topic matches #{exception.inspect}" if exclude_topics.empty?

        exclude_topics
      end
    end

    def all_topics
      @all_topics ||= TopicLoader.from_file(topic_file)
    end

    def categories
      @categories ||= CategoryLoader.from_file(category_file) do |*topic_names|
        topic_names.flat_map do |topic_name|
          all_topics.select { |topic| topic.matches?(topic_name) }
        end
      end
    end

    def topics_matching(category_or_topic_name)
      matching_topics = categories.select { |category| category.matches?(category_or_topic_name) }.flat_map(&:topics)
      return matching_topics if matching_topics.any?

      all_topics.select { |topic| topic.matches?(category_or_topic_name) }
    end

    def validate?
      @validate
    end

    def self.run(...) = new(...).run
  end
end

if $PROGRAM_NAME == __FILE__
  arguments = ARGV.dup
  options = {}
  OptionParser.new(&BuildPattern::OPTIONS).parse!(arguments, into: options)
  options.transform_keys! { |key| key.to_s.tr("-", "_").to_sym }
  BuildPattern::App.run(*arguments, **options)
end
