#!/usr/bin/env ruby
# frozen_string_literal: true

require "optparse"
require "pathname"
require "yaml"

module Skyfeed
  OPTIONS = proc do |opts|
    opts.banner = <<~USAGE
      Usage: skyfeed TOPICFILE [OPTIONS]
    USAGE

    opts.on "--help", -"h", "Prints this help" do
      puts opts
      exit
    end
  end

  class App
    attr_reader :topic_file

    def initialize(topic_file, validate: false)
      @topic_file = Pathname(topic_file)
      @validate = validate
    end

    def run
      exit(1) unless valid?

      puts ['\b(', patterns.join("|"), ')\b'].join
    end

    def valid?
      categories.all? do |category, topics|
        topics.all? do |topic, patterns|
          patterns.all? do |pattern|
            /#{pattern}/
          rescue StandardError => e
            warn "#{category} #{topic.inspect}: #{e}"
            nil
          end
        end
      end
    end

    def patterns
      categories.values.flat_map(&:values).flat_map do |patterns|
        patterns.map { |pattern| Array(pattern).join }
      end.sort_by(&:length).reverse
    end

    def categories
      @categories ||= begin
        cats = YAML.load_file(topic_file, aliases: true).except("Macros")
        cats.transform_values do |topics|
          topics.transform_values do |patterns|
            patterns.map { |pattern| Array(pattern).join }
          end
        end
      end
    end

    def validate?
      @validate
    end

    def self.run(...)
      new(...).run
    end
  end
end

if $PROGRAM_NAME == __FILE__
  arguments = ARGV.dup
  options = {}
  OptionParser.new(&Skyfeed::OPTIONS).parse!(arguments, into: options)
  options.transform_keys! { |key| key.to_s.tr("-", "_").to_sym }
  Skyfeed::App.run(*arguments, **options)
end
